apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'de.mannodermaus.android-junit5'

if (!liteFlavor()) {
	apply from: 'prebuild.gradle'
} else {
	delete new File('src/main/res/raw/auth_config_onedrive.json')
}

android {
	signingConfigs {
		debug {
			keyAlias 'androiddebugkey'
			keyPassword 'android'
			storeFile file('debug.keystore')
			storePassword 'android'
		}
	}

	def globalConfiguration = rootProject.extensions.getByName("ext")

	compileSdkVersion globalConfiguration["androidCompileSdkVersion"]
	buildToolsVersion globalConfiguration["androidBuildToolsVersion"]

	defaultConfig {
		minSdkVersion globalConfiguration["androidMinSdkVersion"]
		targetSdkVersion globalConfiguration["androidTargetSdkVersion"]

		applicationId globalConfiguration["androidApplicationId"]
		versionCode globalConfiguration["androidVersionCode"]
		versionName globalConfiguration["androidVersionName"]

		multiDexEnabled true
		testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_17
		targetCompatibility JavaVersion.VERSION_17

		coreLibraryDesugaringEnabled true
	}

	buildFeatures {
		viewBinding true
	}

	buildTypes {
		release {
			crunchPngs false
			minifyEnabled false
			shrinkResources false
			zipAlignEnabled true

			buildConfigField "String", "DROPBOX_API_KEY", "\"" + getApiKey('DROPBOX_API_KEY') + "\""
			buildConfigField "String", "PCLOUD_CLIENT_ID", "\"" + getApiKey('PCLOUD_CLIENT_ID') + "\""

			manifestPlaceholders = [DROPBOX_API_KEY: getApiKey('DROPBOX_API_KEY'), ONEDRIVE_API_KEY_DECODED: getOnedriveApiKey()]
		}

		debug {
			signingConfig signingConfigs.debug

			crunchPngs false
			minifyEnabled false
			shrinkResources false
			testCoverageEnabled false

			buildConfigField "String", "DROPBOX_API_KEY", "\"" + getApiKey('DROPBOX_API_KEY_DEBUG') + "\""
			buildConfigField "String", "PCLOUD_CLIENT_ID", "\"" + getApiKey('PCLOUD_CLIENT_ID_DEBUG') + "\""

			manifestPlaceholders = [DROPBOX_API_KEY: getApiKey('DROPBOX_API_KEY_DEBUG'), ONEDRIVE_API_KEY_DECODED: getOnedriveApiKey()]

			applicationIdSuffix ".debug"
			versionNameSuffix '-DEBUG'
		}
	}

	flavorDimensions "version"

	productFlavors {
		playstore {
			dimension "version"
		}

		apkstore {
			dimension "version"
		}

		fdroid {
			dimension "version"
		}

		lite {
			dimension "version"

			applicationIdSuffix ".lite"
			resValue "string", "app_id", androidApplicationId + applicationIdSuffix
		}
	}

	sourceSets {
		playstore {
			java.srcDirs = ['src/main/java', 'src/apiKey/java/', 'src/apkStorePlaystore/java/']
		}

		apkstore {
			java.srcDirs = ['src/main/java/', 'src/apiKey/java/', 'src/apkStorePlaystore/java/']
		}

		fdroid {
			java.srcDirs = ['src/main/java/', 'src/apiKey/java/', 'src/fdroid/java/', 'src/fdroidAndLite/java/']
		}

		lite {
			java.srcDirs = ['src/main/java/', 'src/lite/java/', 'src/fdroidAndLite/java/']
		}
	}

	packagingOptions {
		resources {
			excludes += ['META-INF/jersey-module-version', 'META-INF/NOTICE.md', 'META-INF/DEPENDENCIES', 'META-INF/INDEX.LIST']
		}
	}

	dependenciesInfo {
		// Disables dependency metadata when building APKs, see #539
		includeInApk = false
	}

	lint {
		abortOnError false
		ignoreWarnings true
		quiet true
	}

	namespace 'org.cryptomator.presentation'
}

dependencies {
	def dependencies = rootProject.ext.dependencies

	// custom code generators
	kapt project(':generator')
	implementation project(':generator-api')
	implementation project(':util')
	implementation project(':domain')
	implementation project(':data')

	coreLibraryDesugaring dependencies.coreDesugaring

	// dagger
	kapt dependencies.daggerCompiler
	implementation dependencies.dagger
	// ui
	implementation dependencies.appcompat
	implementation dependencies.recyclerView
	implementation dependencies.design
	implementation dependencies.scaleImageView
	implementation dependencies.recyclerViewFastScroll

	// room (required for adding DatabaseModule to the dagger graph)
	implementation dependencies.room

	// android x
	implementation dependencies.androidxCore
	implementation dependencies.androidxFragment
	implementation dependencies.androidxViewpager
	implementation dependencies.androidxSplashscreen
	implementation dependencies.androidxSwiperefresh
	implementation dependencies.androidxPreference
	implementation dependencies.androidxBiometric

	// cloud
	playstoreImplementation dependencies.dropboxCore
	playstoreImplementation dependencies.dropboxAndroid
	apkstoreImplementation dependencies.dropboxCore
	apkstoreImplementation dependencies.dropboxAndroid
	fdroidImplementation dependencies.dropboxCore
	fdroidImplementation dependencies.dropboxAndroid

	playstoreImplementation dependencies.msgraphAuth
	apkstoreImplementation dependencies.msgraphAuth
	fdroidImplementation dependencies.msgraphAuth
	playstoreImplementation dependencies.msgraph
	apkstoreImplementation dependencies.msgraph
	fdroidImplementation dependencies.msgraph

	playstoreImplementation(dependencies.googleApiServicesDrive) {
		exclude module: 'guava-jdk5'
		exclude module: 'httpclient'
		exclude module: 'googlehttpclient'
		exclude group: "com.google.http-client", module: "google-http-client"
	}
	apkstoreImplementation(dependencies.googleApiServicesDrive) {
		exclude module: 'guava-jdk5'
		exclude module: 'httpclient'
		exclude group: "com.google.http-client", module: "google-http-client"
	}

	playstoreImplementation(dependencies.googleApiClientAndroid) {
		exclude module: 'guava-jdk5'
		exclude module: 'httpclient'
		exclude module: "google-http-client"
		exclude module: "jetified-google-http-client"
		exclude group: "com.google.http-client", module: "google-http-client"
		exclude group: "com.google.http-client", module: "jetified-google-http-client"
	}
	apkstoreImplementation(dependencies.googleApiClientAndroid) {
		exclude module: 'guava-jdk5'
		exclude module: 'httpclient'
		exclude module: "google-http-client"
		exclude module: "jetified-google-http-client"
		exclude group: "com.google.http-client", module: "google-http-client"
		exclude group: "com.google.http-client", module: "jetified-google-http-client"
	}

	playstoreImplementation dependencies.trackingFreeGoogleCLient
	apkstoreImplementation dependencies.trackingFreeGoogleCLient
	playstoreImplementation dependencies.trackingFreeGoogleAndroidCLient
	apkstoreImplementation dependencies.trackingFreeGoogleAndroidCLient

	// rest
	implementation dependencies.rxJava
	implementation dependencies.rxAndroid
	compileOnly dependencies.javaxAnnotation
	implementation dependencies.zxcvbn
	implementation dependencies.rxBinding

	// multidex
	implementation dependencies.multidex

	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

	// test
	androidTestImplementation dependencies.androidAnnotations
	androidTestImplementation dependencies.design

	androidTestImplementation(dependencies.espresso) {
		exclude group: 'com.android.support', module: 'support-annotations'
		exclude group: 'com.google.code.findbugs'
	}
	androidTestImplementation(dependencies.runner) {
		exclude group: 'com.android.support', module: 'support-annotations'
	}

	androidTestImplementation(dependencies.rules) {
		exclude group: 'com.android.support', module: 'support-annotations'
	}

	androidTestImplementation(dependencies.contribution) {
		exclude group: 'com.android.support', module: 'support-annotations'
		exclude group: 'com.android.support', module: 'appcompat-v7'
		exclude group: 'com.android.support', module: 'support-v4'
		exclude module: 'recyclerview-v7'
		exclude group: 'com.google.code.findbugs'
	}

	androidTestImplementation(dependencies.uiAutomator) {
		exclude group: 'com.android.support'
	}

	androidTestImplementation dependencies.runner
	androidTestImplementation dependencies.androidAnnotations


	testImplementation dependencies.junit
	testImplementation dependencies.junitApi
	testRuntimeOnly dependencies.junitEngine
	testImplementation dependencies.junitParams
	testRuntimeOnly dependencies.junit4Engine

	testImplementation dependencies.mockito
	testImplementation dependencies.mockitoInline
	testImplementation dependencies.hamcrest
}

configurations {
	all*.exclude group: 'com.google.android', module: 'android'
	all*.exclude group: 'com.google.guava', module: 'listenablefuture'
}

def liteFlavor() {
	gradle.startParameter.taskNames.stream().filter(t -> t.toLowerCase().contains("lite")).findAny().isPresent()
}

def getOnedriveApiKey() {
	if (liteFlavor()) {
		return ""
	}
	String onedrivePath = "" + getApiKey('ONEDRIVE_API_REDIRCT_URI')
	String idStr = onedrivePath.substring(onedrivePath.lastIndexOf('/') + 1)
	URI uri = new URI(idStr)
	return uri.path
}

task updateGradleVerification(type: Exec) {
	commandLine 'sh', '../buildsystem/updateGradleVerification.sh'
}

tasks.withType(Test) {
	testLogging {
		events "failed"

		showExceptions true
		exceptionFormat "full"
		showCauses true
		showStackTraces true

		showStandardStreams = false
	}
}

/**
 * required to make baseline.profm deterministic, see https://issuetracker.google.com/issues/231837768
 * remove when upgrade to AGP >= 8.1.0-alpha03
 */
import com.android.tools.profgen.ArtProfileKt
import com.android.tools.profgen.ArtProfileSerializer
import com.android.tools.profgen.DexFile

project.afterEvaluate {
	tasks.each { task ->
		if (task.name.startsWith("compile") && task.name.endsWith("ReleaseArtProfile")) {
			task.doLast {
				outputs.files.each { file ->
					if (file.name.endsWith(".profm")) {
						println("Sorting ${file} ...")
						def version = ArtProfileSerializer.valueOf("METADATA_0_0_2")
						def profile = ArtProfileKt.ArtProfile(file)
						def keys = new ArrayList(profile.profileData.keySet())
						def sortedData = new LinkedHashMap()
						Collections.sort keys, new DexFile.Companion()
						keys.each { key -> sortedData[key] = profile.profileData[key] }
						new FileOutputStream(file).with {
							write(version.magicBytes$profgen)
							write(version.versionBytes$profgen)
							version.write$profgen(it, sortedData, "")
						}
					}
				}
			}
		}
	}
}
